{"mappings":"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","sources":["src/game.ts","node_modules/@swc/helpers/src/_define_property.js","src/game-ui.ts","src/index.ts"],"sourcesContent":["export enum PlayResult {\n  SUCCESS = \"success\",\n  FAILURE = \"failure\",\n  PENDING = \"pending\",\n  GAMEOVER = \"game-over\",\n}\n\ntype Play = {\n  card: number;\n  result: PlayResult.PENDING | PlayResult.SUCCESS | PlayResult.FAILURE;\n  time: Date;\n};\n\nexport class Game {\n  public static generateRandomNumbers = generateRandomNumbers;\n  private readonly initalValues: number[];\n  private readonly solvedValues: number[];\n  public readonly cards: number[];\n  public readonly playHistory: Play[];\n\n  constructor(values: number[]) {\n    this.initalValues = values;\n    this.solvedValues = [];\n\n    this.cards = this.doubleAndShuffle(values);\n    this.playHistory = [];\n  }\n\n  public cardSelected(card: number): PlayResult {\n    if (card === undefined || card === null)\n      throw new Error(\"Card is not defined.\");\n    if (this.isCardNotPartGame(card))\n      throw new Error(\"This card is not part of the current game.\");\n    if (this.isCardSolved(card))\n      throw new Error(\"This card has already been solved.\");\n\n    const lastPlay = this.playHistory[this.playHistory.length - 1];\n    console.debug(\"last play\", lastPlay);\n\n    let result: PlayResult;\n    if (!lastPlay || lastPlay.result !== PlayResult.PENDING) {\n      result = PlayResult.PENDING;\n    } else {\n      result = lastPlay.card === card ? PlayResult.SUCCESS : PlayResult.FAILURE;\n    }\n\n    const currentPlay = {\n      card,\n      result,\n      time: new Date(),\n    };\n    this.playHistory.push(currentPlay);\n    console.debug(\"current play\", currentPlay);\n\n    if (result === PlayResult.SUCCESS) {\n      this.solvedValues.push(card);\n      if (this.isGameEnded()) return PlayResult.GAMEOVER;\n    }\n\n    return result;\n  }\n\n  private isCardNotPartGame(card: number) {\n    return !this.initalValues.includes(card);\n  }\n\n  private isCardSolved(card: number) {\n    const lengthInInital = this.initalValues.filter(\n      (value) => value === card\n    ).length;\n\n    const lengthInSolved = this.solvedValues.filter(\n      (value) => value === card\n    ).length;\n\n    return lengthInSolved === lengthInInital;\n  }\n\n  private isGameEnded() {\n    return this.solvedValues.length === this.initalValues.length;\n  }\n\n  private doubleAndShuffle(values: any[]) {\n    const doubled = [...values, ...values];\n    const shuffled = doubled.sort(() => Math.random() - 0.5);\n    return shuffled;\n  }\n}\n\n/**\n * @param numberOfNumbers How many random numbers to generate.\n * @param minNumber The min number (inclusive) that can be returned.\n * @param maxNumber The max number (exclusive) that can be returned.\n */\nfunction generateRandomNumbers(\n  numberOfNumbers: number,\n  minNumber: number = 0,\n  maxNumber: number = 101\n) {\n  const numbers = [];\n  while (numbers.length < numberOfNumbers) {\n    numbers.push(getFlooredRandom(minNumber, maxNumber));\n  }\n  return numbers;\n}\n\nfunction getFlooredRandom(min: number, max: number) {\n  const arbitraryRandom = Math.random() * (max - min) + min;\n  return Math.floor(arbitraryRandom);\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import { Game, PlayResult } from \"./game\";\n\nexport function createCardElements(game: Game) {\n  const cardElements = game.cards.map((card) =>\n    createCard(card, (event: Event) => handleCardClicked(event, game))\n  );\n\n  return cardElements;\n}\n\nfunction createCard(card: number, clickHandler: EventListener) {\n  const cardElement = createElementWithClass(\"button\", [\"card\"]);\n  cardElement.addEventListener(\"click\", clickHandler, true);\n  const cardInner = createElementWithClass(\"div\", [\"card-inner\"]);\n  const cardFront = createElementWithClass(\"div\", [\"card-front\"]);\n  const cardBack = createElementWithClass(\"div\", [\"card-back\"]);\n  const h2 = createElementWithTextNode(\"h2\", card.toString());\n\n  cardBack.appendChild(h2);\n  cardInner.appendChild(cardFront);\n  cardInner.appendChild(cardBack);\n  cardElement.appendChild(cardInner);\n\n  return cardElement;\n}\n\nfunction createElementWithClass(elementType: string, classes: string[]) {\n  const element = document.createElement(elementType);\n  element.classList.add(...classes);\n  return element;\n}\n\nfunction createElementWithTextNode(elementType: string, text: string) {\n  const element = document.createElement(elementType);\n  const textNode = document.createTextNode(text);\n  element.appendChild(textNode);\n  return element;\n}\n\nlet currentPendingElement: HTMLButtonElement | undefined;\nfunction handleCardClicked(event: Event, game: Game) {\n  const cardElement = event.currentTarget as HTMLButtonElement;\n\n  cardElement.disabled = true;\n  cardElement.classList.add(\"selected\");\n\n  const bothCards = [cardElement, currentPendingElement];\n\n  const card = Number(cardElement.innerText.trim());\n  const result = game.cardSelected(card);\n\n  switch (result) {\n    case PlayResult.PENDING:\n      currentPendingElement = cardElement;\n      break;\n    case PlayResult.FAILURE:\n      addClass(\"failure\", bothCards);\n      resetButtonAfterDelay(bothCards);\n      break;\n\n    case PlayResult.GAMEOVER:\n      alertOnGameEnd();\n    //Game over also triggers the success secion.\n    case PlayResult.SUCCESS:\n      addClass(\"success\", bothCards);\n      removeClass(\"failure\", bothCards);\n      break;\n    default:\n      console.error(\"Unknown play result in click handler.\");\n      break;\n  }\n}\n\nfunction addClass(className: string, elements: Array<HTMLElement | undefined>) {\n  for (const element of elements) {\n    element?.classList.add(className);\n  }\n}\n\nfunction removeClass(\n  className: string,\n  elements: Array<HTMLElement | undefined>\n) {\n  for (const element of elements) {\n    element?.classList.remove(className);\n  }\n}\n\nfunction resetButtonAfterDelay(cards: Array<HTMLButtonElement | undefined>) {\n  window.setTimeout(function () {\n    removeClass(\"selected\", cards);\n    removeClass(\"failure\", cards);\n    for (const card of cards) {\n      if (card) card.disabled = false;\n    }\n  }, 1000);\n}\n\nfunction alertOnGameEnd() {\n  window.setTimeout(() => {\n    const reloadGame = confirm(\"Restart the game?\");\n    if (reloadGame) location.reload();\n  }, 500);\n}\n","import { Game } from \"./game\";\nimport { createCardElements } from \"./game-ui\";\n\nconst NUMBERS_IN_PLAY = 5;\n\nconst game = new Game(Game.generateRandomNumbers(NUMBERS_IN_PLAY));\n\nconst cards = createCardElements(game);\n\nconst cardsContainer = document.getElementById(\"cards-container\");\nif (!cardsContainer) throw Error(\"Cannot find cards container.\");\n\ncardsContainer.append(...cards);\n"],"names":["$546bb75ca3527d11$export$b9cef6d9969efb6d","$546bb75ca3527d11$export$985739bfa5723e08","cardSelected","card","Error","this","isCardNotPartGame","isCardSolved","lastPlay","playHistory","length","result","console","debug","PENDING","SUCCESS","FAILURE","currentPlay","time","Date","push","solvedValues","isGameEnded","GAMEOVER","initalValues","includes","lengthInInital","filter","value","doubleAndShuffle","values","sort","Math","random","constructor","cards","obj","key","$546bb75ca3527d11$var$getFlooredRandom","min","max","arbitraryRandom","floor","$1322cd9c3a69c628$var$createElementWithClass","elementType","classes","element","document","createElement","classList","add","$1322cd9c3a69c628$var$currentPendingElement","$1322cd9c3a69c628$var$addClass","className","elements","$1322cd9c3a69c628$var$removeClass","remove","numberOfNumbers","minNumber","maxNumber","numbers","Object","defineProperty","enumerable","configurable","writable","$1e6a16da88d577c6$var$cards","game","cardElements","map","clickHandler","cardElement","addEventListener","cardInner","cardFront","cardBack","h2","text","textNode","createTextNode","appendChild","$1322cd9c3a69c628$var$createElementWithTextNode","toString","$1322cd9c3a69c628$var$createCard","event","currentTarget","disabled","bothCards","Number","innerText","trim","window","setTimeout","confirm","location","reload","error","$1322cd9c3a69c628$var$handleCardClicked","$1322cd9c3a69c628$export$b3b7bb28a4f287ab","generateRandomNumbers","$1e6a16da88d577c6$var$cardsContainer","getElementById","append"],"version":3,"file":"index.2ef42b7c.js.map"}